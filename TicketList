package application;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class TicketList {
    private TableView<Ticket> ticketTable;
    private static boolean editOrDeleteOccurred = false;

    @SuppressWarnings("unchecked")
	public static void showTicketList(Main main, List<String> projectNames) {
        VBox ticketListBox = new VBox(10);
        ticketListBox.setStyle("-fx-font-size: 13px; -fx-font-family: 'Comic Sans MS';");
      //  ticketListBox.setAlignment(Pos.TOP_RIGHT);

        HBox searchBox = new HBox(0); 
        searchBox.setAlignment(Pos.CENTER_RIGHT);
        
        TextField searchField = new TextField();
        searchField.setStyle("-fx-font-size: 13px; -fx-font-family: 'Comic Sans MS';");
        searchField.setPromptText("üîç Search tickets...");
        searchField.setMaxWidth(180);
        searchField.setStyle("-fx-prompt-text-fill: derive(-fx-control-inner-background, -30%);");

        ListView<String> searchResults = new ListView<>();
        searchResults.setStyle("-fx-font-size: 12px; -fx-font-family: 'Comic Sans MS';");
        searchResults.setMaxWidth(200);
        searchResults.setMaxHeight(100);
        searchResults.setVisible(false);

        TableView<Ticket> ticketTable = new TableView<>();
        TableColumn<Ticket, String> ticketTitleColumn = new TableColumn<>("Ticket title");
        TableColumn<Ticket, String> projectColumn = new TableColumn<>("Project Name");
        TableColumn<Ticket, String> descriptionColumn = new TableColumn<>("Description");
        TableColumn<Ticket, Void> editColumn = new TableColumn<Ticket, Void>("Edit");
        TableColumn<Ticket, Void> deleteColumn = new TableColumn<Ticket, Void>("Delete");


        ticketTitleColumn.setCellValueFactory(cellData -> cellData.getValue().titleProperty());
        projectColumn.setCellValueFactory(cellData -> cellData.getValue().projectNameProperty());
        descriptionColumn.setCellValueFactory(cellData -> cellData.getValue().descriptionProperty());


        // Set fixed sizes for the edit and delete buttons
        int buttonWidth = 170; // Adjust the width as needed


        editColumn.setPrefWidth(150);
        deleteColumn.setPrefWidth(150);

        editColumn.setCellFactory(param -> new TableCell<Ticket, Void>() {
            private final Button editButton = new Button("Edit");

            {
                editButton.setMinWidth(buttonWidth);
                editButton.setMaxWidth(buttonWidth);

                editButton.setOnAction(event -> {
                    Ticket selectedTicket = getTableView().getItems().get(getIndex());
                    Edit.display(selectedTicket);
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    setGraphic(editButton);
                }
            }
        });

        deleteColumn.setCellFactory(param -> new TableCell<Ticket, Void>() {
            private final Button deleteButton = new Button("Delete");

            {
                deleteButton.setMinWidth(buttonWidth);
                deleteButton.setMaxWidth(buttonWidth);

                deleteButton.setOnAction(event -> {
                    Ticket selectedTicket = getTableView().getItems().get(getIndex());
                    Delete.deleteTicket(selectedTicket, ticketTable);
                    boolean editOrDeleteOccurred = true;
                });
            }
            

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    setGraphic(deleteButton);
                }
            }
        }); 

        ticketTable.getColumns().addAll(ticketTitleColumn, projectColumn, descriptionColumn, editColumn, deleteColumn);
        ticketTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

        List<Ticket> tickets = getTicketsForProjects(main.connectToDatabase, projectNames);
		try {
			tickets = getTicketsForProjects(main.connectToDatabase, projectNames);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        ObservableList<Ticket> ticketsData = FXCollections.observableArrayList(tickets);

        ticketTable.setItems(ticketsData);

        searchField.textProperty().addListener((observable, oldValue, newValue) -> {
            performSearch(newValue, ticketsData, ticketTable, searchResults);
        });

        ticketListBox.setOnKeyPressed(event -> {
            if (event.getCode() == KeyCode.ESCAPE && editOrDeleteOccurred) {
                searchField.clear();
                searchResults.setVisible(false);
                ticketTable.setItems(ticketsData);
                editOrDeleteOccurred = false;
            }
        });

        ticketListBox.setOnMouseClicked(event -> {
            if (editOrDeleteOccurred) {
                searchField.clear();
                searchResults.setVisible(false);
                ticketTable.setItems(ticketsData);
                editOrDeleteOccurred = false;
            }
        });

        Button backButton = new Button("Back");
        backButton.setOnAction(event -> {
            main.startScreen(main.loadProjectNamesFromDatabase());
            if (editOrDeleteOccurred) {
                editOrDeleteOccurred = false;
                return;
            }
        });

        Button cancelSearchButton = new Button("X");
        cancelSearchButton.setOnAction(event -> {
            searchField.clear();
            searchResults.setVisible(false);
            ticketTable.setItems(ticketsData);
            editOrDeleteOccurred = false;
        });

     // Put the search field and cancel button in an HBox
        HBox searchFieldBox = new HBox(0);
        searchFieldBox.getChildren().addAll(searchField, cancelSearchButton);

        StackPane searchPane = new StackPane();
        searchPane.getChildren().addAll(searchResults);
        StackPane.setAlignment(searchResults, Pos.TOP_RIGHT);
        
        StackPane stackPane = new StackPane();
        stackPane.getChildren().addAll(ticketTable, searchResults);
        StackPane.setAlignment(searchResults, Pos.TOP_RIGHT);
        
        searchBox.getChildren().addAll(searchFieldBox);
        
        HBox backBox = new HBox(backButton); 
        backBox.setAlignment(Pos.BASELINE_LEFT); 

        HBox.setHgrow(searchBox, Priority.ALWAYS);
        ticketListBox.setPadding(new Insets(20, 20, 20, 20));

        ticketListBox.getChildren().addAll(searchBox, stackPane, backButton);
        main.projectStage.setScene(new Scene(ticketListBox, 950, 600));
        main.projectStage.setTitle("Ticket List");
        main.projectStage.show();
    }
    private void refreshTicketList(Connection connection, List<String> projectNames) {
        List<Ticket> tickets = getTicketsForProjects(connection, projectNames);
        ObservableList<Ticket> ticketsData = FXCollections.observableArrayList(tickets);
        ticketTable.setItems(ticketsData);
    }

    private static List<Ticket> getTicketsForProjects(Connection connection, List<String> projectNames) {
        List<Ticket> tickets = new ArrayList<>();
        try {
            for (String projectName : projectNames) {
                String query = "SELECT T.title, T.description, P.name AS project_name " +
                        "FROM Tickets T " +
                        "INNER JOIN Projects P ON T.project_name = P.name " +
                        "WHERE P.name = ?";
                PreparedStatement preparedStatement = connection.prepareStatement(query);
                preparedStatement.setString(1, projectName);
                ResultSet resultSet = preparedStatement.executeQuery();

                while (resultSet.next()) {
                    String title = resultSet.getString("title");
                    String description = resultSet.getString("description");
                    String projectNameForTicket = resultSet.getString("project_name");
                    tickets.add(new Ticket(title, description, projectNameForTicket));
                }

                resultSet.close();
                preparedStatement.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return tickets;
    }

    private static void performSearch(String query, ObservableList<Ticket> ticketsData, TableView<Ticket> ticketTable, ListView<String> searchResults) {
        searchResults.getItems().clear();

        if (query.isEmpty()) {
            searchResults.setVisible(false);
            ticketTable.setItems(ticketsData);
        } else {
            searchResults.setVisible(true);

            ObservableList<String> searchResultsData = FXCollections.observableArrayList();
            for (Ticket ticket : ticketsData) {
                // Check if the ticket title or project name contains the search query
                if (ticket.getTitle().toLowerCase().contains(query.toLowerCase()) ||
                        ticket.getProjectName().toLowerCase().contains(query.toLowerCase())) {
                    String resultString = ticket.getTitle() + " - " + ticket.getProjectName();
                    searchResultsData.add(resultString); // Add ticket title and project name to search results
                }
            }

            if (searchResultsData.isEmpty()) {
                searchResults.getItems().add("No results found");
            } else {
                searchResults.setItems(searchResultsData);
            }
        }
    }
}
